import java.util.*;

public class TicTacToe 
{    
	static HashSet<Integer> humanSet = new HashSet<Integer>();    
	static HashSet<Integer> botSet = new HashSet<Integer>();

	public static void main (String [] args) 
	{
		System.out.println("Let's play Tic Tac Toe!");

		char[][]board = {
				{' ', '|', ' ', '|', ' '}, 
				{'-', '+', '-', '+', '-'},
				{' ', '|', ' ', '|', ' '},
				{'-', '+', '-', '+', '-'},
				{' ', '|', ' ', '|', ' '}};
		
		printBoard(board);
		Scanner in = new Scanner(System.in);

		while(true) 
		{
			System.out.println("Please choose a number from 1 to 9");
			int inputSpot = in.nextInt();
			while(humanSet.contains(inputSpot) || botSet.contains(inputSpot))
			{
				System.out.println();
				System.out.println("Spot taken! Please try again:");
				inputSpot = in.nextInt();
			}
			trackSpot(board, inputSpot, "You");

			String winner = hasWon();
			if(winner.length() > 0) 
			{
				System.out.println(winner);
				break;            
			}

			//bot in random
			int botSpot = (int)(Math.random()*9)+1;
			//9 is the range, 1 is the min
			while(humanSet.contains(botSpot) || botSet.contains(botSpot))
			{
				botSpot = (int)(Math.random()*9)+1;
			}

			trackSpot(board, botSpot, "Bot");
			winner = hasWon();
			if(winner.length() > 0)
			{
				System.out.println(winner);
				break;
			}
		}
		in.close();
	}

	public static void trackSpot(char[][] board, int spot, String user)
	{

		char sign = ' ';

		if(user.equals("You"))
		{
			sign = 'X';
			humanSet.add(spot);
		} 
		else if(user.equals("Bot"))
		{
			sign = ' ';
			botSet.add(spot);
		}
		else
		{
			System.out.println("Invalid input!");
		}

		switch(spot)
		{
		case 1:
			board[0][0] = sign;
			break;
		case 2:
			board[0][2] = sign;
			break;
		case 3:
			board[0][4] = sign;
			break;
		case 4:
			board[2][0] = sign;
			break;
		case 5:
			board[2][2] = sign;
			break;
		case 6:
			board[2][4] = sign;
			break;
		case 7:
			board[4][0] = sign;
			break;
		case 8:
			board[4][2] = sign;
			break;
		case 9:
			board[4][4] = sign;
			break;                          
		default:
			System.out.println("Invalid input!");
		}
		System.out.println();
		printBoard(board);
	}


	public static String hasWon()
	{        
		HashSet<Integer> r1 = new HashSet<Integer>();
		r1.add(1); r1.add(2); r1.add(3);

		HashSet<Integer> r2 = new HashSet<Integer>();
		r2.add(4); r2.add(5); r2.add(6);

		HashSet<Integer> r3 = new HashSet<Integer>();
		r3.add(7); r3.add(8); r3.add(9);

		HashSet<Integer> c1 = new HashSet<Integer>();
		c1.add(1); c1.add(4); c1.add(7);

		HashSet<Integer> c2 = new HashSet<Integer>();
		c2.add(2); c2.add(5); c2.add(8);

		HashSet<Integer> c3 = new HashSet<Integer>();
		c3.add(3); c3.add(6); c3.add(9);

		HashSet<Integer> d1 = new HashSet<Integer>();
		d1.add(1); d1.add(5); d1.add(9);

		HashSet<Integer> d2 = new HashSet<Integer>();
		d2.add(3); d2.add(5); d2.add(7);

		HashSet<HashSet> lines = new HashSet<HashSet>();
		lines.add(r1);
		lines.add(r2);
		lines.add(r3);
		lines.add(c1);
		lines.add(c2);
		lines.add(c3);
		lines.add(d1);
		lines.add(d2);

		for(HashSet sets : lines)
		{
			if(humanSet.containsAll(sets))
			{
				return "You won!";
			} 
			else if(botSet.containsAll(sets))
			{
				return "You lost!";
			} 
		}
		if(humanSet.size() + botSet.size() == 9)
		{
			return "It's a draw!";
		}
		return "";       
	}

	public static void printBoard(char[][] board)
	{ 
		for(int i = 0; i < board.length; i++) 
		{
			for(int j = 0; j < board[0].length; j++) 
			{
				System.out.print(board[i][j]);              
			}
			System.out.println();
		}
	}
}
